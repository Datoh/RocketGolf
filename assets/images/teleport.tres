[gd_resource type="ShaderMaterial" load_steps=17 format=2]

[ext_resource path="res://assets/images/twirl_02.png" type="Texture" id=1]
[ext_resource path="res://assets/shaders/sinTime.gd" type="Script" id=2]
[ext_resource path="res://assets/shaders/swirlUV.gd" type="Script" id=3]

[sub_resource type="VisualShaderNodeCustom" id=1]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 1.0 ]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVectorOp" id=2]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 1, 1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=3]
output_port_for_preview = 0
uniform_name = "Texture"

[sub_resource type="VisualShaderNodeVec3Constant" id=4]
constant = Vector3( 1, 0.5, 0 )

[sub_resource type="VisualShaderNodeScalarConstant" id=5]
constant = 10.0

[sub_resource type="VisualShaderNodeVectorOp" id=7]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=8]
uniform_name = "Intensity"

[sub_resource type="VisualShaderNodeColorUniform" id=9]
uniform_name = "TintColor"

[sub_resource type="VisualShaderNodeVectorOp" id=10]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=14]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "uv"

[sub_resource type="VisualShaderNodeCustom" id=12]
output_port_for_preview = 0
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, 0.0, 3, 0.0 ]
script = ExtResource( 3 )

[sub_resource type="VisualShader" id=13]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform vec4 TintColor : hint_color;
uniform sampler2D Texture;
uniform float Intensity;


// SwirlUV

vec2 swirlUVFunc(vec2 _uv_sw1rl, float _t1me_sw1rl, vec2 _p1vot_sw1rl, float _amount_sw1rl){
  float _rotation_index_sw1rl = _amount_sw1rl * length(_uv_sw1rl - _p1vot_sw1rl) * _t1me_sw1rl;
  _uv_sw1rl -= _p1vot_sw1rl;
  _uv_sw1rl *= mat2(vec2(cos(_rotation_index_sw1rl), - sin(_rotation_index_sw1rl)),
                    vec2(sin(_rotation_index_sw1rl), cos(_rotation_index_sw1rl)));
  _uv_sw1rl += _p1vot_sw1rl;
  return _uv_sw1rl;
}


void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:2
	vec3 n_out2p0 = TintColor.rgb;
	float n_out2p1 = TintColor.a;

// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// VectorOp:11
	vec3 n_in11p1 = vec3(2.00000, 1.00000, 1.00000);
	vec3 n_out11p0 = n_out6p0 * n_in11p1;

// Vector:14
	vec3 n_out14p0 = vec3(1.000000, 0.500000, 0.000000);

// Scalar:22
	float n_out22p0 = 1.000000;

// Scalar:15
	float n_out15p0 = 10.000000;

// SinTIME:10
	float n_in10p0 = 1.00000;
	float n_out10p0;
	{
		n_out10p0 = n_out15p0 * sin(n_in10p0 * TIME);
	}

// SwirlUV:8
	vec3 n_out8p0;
	{
		n_out8p0.xy = swirlUVFunc(n_out11p0.xy, n_out10p0, n_out14p0.xy, n_out22p0);
	}

// TextureUniform:12
	vec3 n_out12p0;
	float n_out12p1;
	{
		vec4 n_tex_read = texture(Texture, n_out8p0.xy);
		n_out12p0 = n_tex_read.rgb;
		n_out12p1 = n_tex_read.a;
	}

// VectorOp:21
	vec3 n_out21p0 = n_out2p0 * n_out12p0;

// ScalarUniform:18
	float n_out18p0 = Intensity;

// VectorOp:17
	vec3 n_out17p0 = n_out21p0 * vec3(n_out18p0);

// Output:0
	ALBEDO = n_out21p0;
	ALPHA = dot(n_out12p0, vec3(0.333333, 0.333333, 0.333333));
	EMISSION = n_out17p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -282, -115.5 )
nodes/fragment/0/position = Vector2( 880, -80 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( 280, 0 )
nodes/fragment/6/node = SubResource( 11 )
nodes/fragment/6/position = Vector2( -340, -20 )
nodes/fragment/8/node = SubResource( 12 )
nodes/fragment/8/position = Vector2( 60, 140 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -160, 280 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -160, -60 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 280, 140 )
nodes/fragment/14/node = SubResource( 4 )
nodes/fragment/14/position = Vector2( -340, 80 )
nodes/fragment/15/node = SubResource( 5 )
nodes/fragment/15/position = Vector2( -380, 200 )
nodes/fragment/17/node = SubResource( 7 )
nodes/fragment/17/position = Vector2( 700, 240 )
nodes/fragment/18/node = SubResource( 8 )
nodes/fragment/18/position = Vector2( 480, 280 )
nodes/fragment/21/node = SubResource( 10 )
nodes/fragment/21/position = Vector2( 480, -60 )
nodes/fragment/22/node = SubResource( 14 )
nodes/fragment/22/position = Vector2( -160, 180 )
nodes/fragment/connections = PoolIntArray( 11, 0, 8, 0, 6, 0, 11, 0, 15, 0, 10, 1, 8, 0, 12, 0, 14, 0, 8, 1, 10, 0, 8, 3, 2, 0, 21, 0, 12, 0, 21, 1, 21, 0, 0, 0, 21, 0, 17, 0, 18, 0, 17, 1, 12, 0, 0, 1, 17, 0, 0, 5, 22, 0, 8, 2 )

[resource]
shader = SubResource( 13 )
shader_param/TintColor = Color( 0.356863, 0.101961, 0.439216, 1 )
shader_param/Intensity = 100.0
shader_param/Texture = ExtResource( 1 )
